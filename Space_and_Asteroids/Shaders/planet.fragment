#version 330 core
out vec4 fragColour;

in vec3 fragPos;
in vec3 normal;
in vec2 texCoords;

struct Material {
    sampler2D texture_diffuse1;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Material material;
uniform Light light;
uniform vec3 cameraPos;

void main()
{
    vec3 diffuseColor = texture(material.texture_diffuse1, texCoords).rgb;
    
    vec3 ambient = light.ambient * diffuseColor;
    
    vec3 n = normalize(normal);
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(n, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * diffuseColor;
    
    vec3 viewDir = normalize(cameraPos - fragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(n, halfwayDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec;
    
    vec3 result = ambient + diffuse + specular;
    fragColour = vec4(result, 1.0);
}