#version 330 core
out vec4 fragColour;

struct Material 
{
    sampler2D texture_diffuse1;
    float shininess;
}; 

struct Light 
{
    vec3 lightPos;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 fragPos;
in vec2 texCoords;
in vec3 normal;

uniform Material material;
uniform Light light;
uniform vec3 cameraPos;

void main()
{
    vec3 ambient = light.ambient * texture(material.texture_diffuse1, texCoords).rgb;

    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(light.lightPos - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.texture_diffuse1, texCoords).rgb;

    vec3 viewDir = normalize(cameraPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec;

    vec3 result = ambient + diffuse + specular;
    fragColour = vec4(result, 1.0);
}